name: CI
on:
  push:
    branches:
      - master
  pull_request:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          - '1'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64
          - x86
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      # - uses: julia-actions/julia-buildpkg@v1
      # - uses: julia-actions/julia-runtest@v1
      - run: sudo apt-get update
      - run: sudo apt-get install -y xvfb xauth
      - run: xvfb-run julia --project=. --check-bounds=yes --color=yes -e 'using InteractiveUtils; versioninfo(verbose=true); using Pkg; Pkg.build(); Pkg.test(coverage=true)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - run: sudo apt-get update
      - run: sudo apt-get install -y xvfb xauth
      - name: Install GitHubActions.jl in its own (shared) environment
        run: |
          using Pkg
          Pkg.activate("docs-logger-env"; shared=true)
          Pkg.add(Pkg.PackageSpec(name="GitHubActions", version="0.1"))
        shell: julia --color=yes {0}
      - name: Build the documentation
        run: |
          # The Julia command that will be executed
          xvfb-run -a julia --color=yes --project=docs/ -e '
              @eval Module() begin
                  push!(LOAD_PATH, "@docs-logger-env") # access GitHubActions.jl
                  import Logging, GitHubActions
                  Logging.global_logger(GitHubActions.GitHubActionsLogger())
                  pop!(LOAD_PATH)
              end
              include("docs/make.jl")'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run doctests
        shell: xvfb-run -a julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using Tk
          DocMeta.setdocmeta!(Tk, :DocTestSetup, :(using Tk); recursive=true)
          doctest(Tk)

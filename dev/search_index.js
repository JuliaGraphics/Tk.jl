var documenterSearchIndex = {"docs":
[{"location":"api/#Tk.jl-API-1","page":"API Reference","title":"Tk.jl API","text":"","category":"section"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#","page":"API Reference","title":"API Reference","text":"Modules = [Tk]\r\nOrder   = [:type, :function]","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"EditURL = \"../../../examples/test.jl\"","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"Example of widgets put into container with change handler assigned","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"using Tk\n\nw = Toplevel(\"Test window\", false)","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"pack in tk frame for themed widgets","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"f = Frame(w)\nconfigure(f, Dict(:padding => [3,3,2,2], :relief=>\"groove\"))\npack(f, expand=true, fill=\"both\")","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"widgets","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"b  = Button(f, \"one\")\ncb = Checkbutton(f, \"checkbutton\")\nrg = Radio(f, [\"one\", \"two\", \"trhee\"])\nsc = Slider(f, 1:10)\nsl = Spinbox(f, 1:10)\ne  = Entry(f, \"starting text\")\nwidgets = (b, cb, rg, sc, sl, e)","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"oops, typo!","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"set_items(rg.buttons[3], \"three\")","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"packing","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"pack_style = [\"pack\", \"grid\", \"formlayout\"][3]\n\nif pack_style == \"pack\"\n    map(pack, widgets)\n    map(u -> pack_configure(u, Dict(:anchor => \"w\")), widgets)\nelseif pack_style == \"grid\"\n    for i in 1:length(widgets)\n        grid(widgets[i], i, 1)\n        grid_configure(widgets[i], Dict(:sticky => \"we\"))\n    end\nelse\n    map(u -> formlayout(u, \"label\"), widgets)\nend","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"bind a callback to each widget","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"change_handler(path,xs...) = println(map(get_value, widgets))\nmap(u -> callback_add(u, change_handler), widgets)\n\nset_visible(w, true)","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"","category":"page"},{"location":"examples/test/#","page":"Test","title":"Test","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/process/#","page":"Process","title":"Process","text":"EditURL = \"../../../examples/process.jl\"","category":"page"},{"location":"examples/process/#","page":"Process","title":"Process","text":"f = \"logo.gif\"\nusing Base64\n\nfunction process_file(f)\n    a = readchomp(`cat $f`)\n    \"<!-- $f -->\\n<img src='data:image/gif;base64,$(base64encode(a))'></img>\"\nend\n\nprocess_file(f)","category":"page"},{"location":"examples/process/#","page":"Process","title":"Process","text":"","category":"page"},{"location":"examples/process/#","page":"Process","title":"Process","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/sketch/#","page":"Sketch","title":"Sketch","text":"EditURL = \"../../../examples/sketch.jl\"","category":"page"},{"location":"examples/sketch/#","page":"Sketch","title":"Sketch","text":"using Tk\nusing Graphics\n\nfunction sketch_window()\n    w = Window(\"drawing\", 400, 300)\n    c = Canvas(w)\n    pack(c)\n    lastx = 0\n    lasty = 0\n    cr = getgc(c)\n    set_source_rgb(cr, 1, 1, 1)\n    paint(cr)\n    reveal(c)\n    set_source_rgb(cr, 0, 0, 0.85)\n    c.mouse.button1press = function (c, x, y)\n        lastx = x; lasty = y\n    end\n    c.mouse.button1motion = function (c, x, y)\n        move_to(cr, lastx, lasty)\n        line_to(cr, x, y)\n        stroke(cr)\n        reveal(c)\n        lastx = x; lasty = y\n    end\n    c\nend","category":"page"},{"location":"examples/sketch/#","page":"Sketch","title":"Sketch","text":"","category":"page"},{"location":"examples/sketch/#","page":"Sketch","title":"Sketch","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#The-Tk-Package-1","page":"Home","title":"The Tk Package","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package provides an interface to the Tcl/Tk libraries, useful for creating graphical user interfaces. The basic functionality is provided by the tcl_eval function, which is used to pass on Tcl commands. The Canvas widget is used to create a device for plotting of julia's graphics. In particular, among others, the Winston and Images package can render to such a device.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The example sketch.jl illustrates this widget for a different purpose.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In addition, there are convenience methods for working with most of the widgets provided by Tk similar to the ones found in R's tcltk package.  For example, we add the tcl function as a wrapper for tcl_eval which provides translations from julia objects into Tcl constructs.","category":"page"},{"location":"#Constructors-1","page":"Home","title":"Constructors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Constructors are provided  for the following widgets","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Toplevel: for top level windows\nFrame, Labelframe, Notebook, Panedwindow: for the basic containers\nLabel, Button, Menu: basic elements\nCheckbutton, Radio, Combobox, Slider, Spinbox: selection widgets\nEntry, Text: text widgets\nTreeview: for trees, but also listboxes and grids\nSizegrip, Separator, Progressbar, Image various widgets","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The basic usage simply calls the ttk:: counterpart, though one can use named arguments to pass in configuration options. As well, some have a convenience interfaces.","category":"page"},{"location":"#Methods-1","page":"Home","title":"Methods","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"In addition to providing constructors, there are few additional convenience methods defined.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The configure, cget, tclvar, identify, state, instate, winfo, wm, bind methods to simplify the corresponding Tcl commands. For a single option of a widget accessed via cget and modified via configure, one can use the index notation with a symbol, as in widget[:option] or widget[:option] = value.\nFor widget layout, we have pack, pack_configure, forget, grid, grid_configure, grid_forget, ... providing interfaces to the appropriate Tk commands, but also formlayout and page_add for working with simple forms and notebooks and pane windows..\nWe add the methods get_value and set_value to get and set the primary value for a control\nWe add the methods get_items and set_items to get and set the item(s) to select from for selection widgets.\nWe add the methods width, height, get_size to get the on-screen size of a widget. For top level windows there are set_width, set_height, and set_size for adjusting the geometry. The :width and :height properties are common to most widgets, and return the requested width and height, which need not be the actual width and height on screen.\nThe conveniences get_enabled and set_enabled to specify if a widget accepts user input","category":"page"},{"location":"#Examples-1","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Hello-world-1","page":"Home","title":"Hello world","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A simple \"Hello world\" example, which shows off many of the styles is given by:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"Example\")                                    ## A titled top level window\nf = Frame(w, padding = [3,3,2,2], relief=\"groove\")         ## A Frame with some options set\npack(f, expand = true, fill = \"both\")                      ## using pack to manage the layout of f\n#\nb = Button(f, \"Click for a message\")                       ## Button constructor has convenience interface\ngrid(b, 1, 1)                                              ## use grid to pack in b. 1,1 specifies location\n#\ncallback(path) = Messagebox(w, title=\"A message\", message=\"Hello World\") ## A callback to open a message\nbind(b, \"command\", callback)                            ## bind callback to 'command' option\nbind(b, \"<Return>\", callback)                           ## press return key when button has focus","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We see the use of an internal frame to hold the button. The frame's layout is managed using pack, the buttons with grid. Both these have some conveniences. For grid, the location of the cell can be specified by 1-based index as shown. The button callback is just a julia function. Its first argument, path, is used internally. In this case, we open a modal dialog with the Messagebox constructor when the callback is called. The button object has this callback bound to the button's command option. This responds to a mouse click, but not a press of the enter key when the button has the focus. For that, we also bind to the <Return> event.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"For the R package tctlk there are numerous examples at http://bioinf.wehi.edu.au/~wettenhall/RTclTkExamples/ . We borrow a few of these to illustrate the Tk package for julia.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Tk commands are combined strings followed by options. Something like: .button configure -text {button text} is called as configure(button, text = \"button text). Key-value options are specified with through named arguments, which are converted to the underlying Tcl object. Similarly, path names are also translated and functions are converted to callbacks.","category":"page"},{"location":"#Pack-widgets-into-a-themed-widget-for-better-appearance-1","page":"Home","title":"Pack widgets into a themed widget for better appearance","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Toplevel is the command to create a new top-level window. (Tk.Window is similar, but we give Toplevel a unique type allowing us to add methods, such as set_value to modify the title.) Toplevel windows play a special role, as they start the widget hierarchy needed when constructing child components.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A top level window is not a themed widget. Immediately packing in a Frame instance is good practice, as otherwise the background of the window may show through:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\nf = Frame(w)\npack(f, expand=true, fill=\"both\")","category":"page"},{"location":"#Notes:-1","page":"Home","title":"Notes:","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Sometimes the frame is configured with padding so that the sizegrip shows, e.g. frame(w, padding = [3,3,2,2]).\nThe above will get the size from the frame – which has no request. This means the window will disappear. You may want to force the size to come from the top level window. You can use tcl(\"pack\", \"propagate\", w, false) (wrapped in pack_stop_propagate) to get this:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"title\", 400, 300)\t## title, width, height\npack_stop_propagate(w)\nf = Frame(w)\npack(f, expand=true, fill=\"both\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"resizing top level windows with the mouse can leave visual artifacts, at least on a Mac. This is not optimal! (The picture below can be avoided by packing an expanding frame into the top level widget.)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Munged Windows)","category":"page"},{"location":"#Message-Box-1","page":"Home","title":"Message Box","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The Messagebox constructor makes a modal message box.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Messagebox(title=\"title\", message=\"message\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"An optional parent argument can be specified to locate the box near the parent, as seen in the examples.","category":"page"},{"location":"#File-Dialogs-1","page":"Home","title":"File Dialogs","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"File Open, File Save and Choose Directory dialogs can be invoked as follows.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"GetOpenFile()\nGetSaveFile()\nChooseDirectory()","category":"page"},{"location":"#Checkbuttons-1","page":"Home","title":"Checkbuttons","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Check button)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Check boxes are constructed with Checkbutton:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\nf = Frame(w)\npack(f, expand=true, fill=\"both\")\ncb = Checkbutton(f, \"I like Julia\")\npack(cb)\n\nfunction callback(path)\t\t   ## callbacks have at least one argument\n  value = get_value(cb)\n  msg = value ? \"Glad to hear that\" : \"Sorry to hear that\"\n  Messagebox(w, title=\"Thanks for the feedback\", message=msg)\nend\n\nbind(cb, \"command\", callback)   ## bind to command option","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The set_items method can be used to change the label.","category":"page"},{"location":"#Radio-buttons-1","page":"Home","title":"Radio buttons","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Radio button)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\nf = Frame(w)\npack(f, expand=true, fill=\"both\")\n\nl  = Label(f, \"Which do you prefer?\")\nrb = Radio(f, [\"apples\", \"oranges\"])\nb  = Button(f, \"ok\")\nmap(u -> pack(u, anchor=\"w\"), (l, rb, b))     ## pack in left to right\n\n\nfunction callback(path)\n  msg = (get_value(rb) == \"apples\") ? \"Good choice!  An apple a day keeps the doctor away!\" :\n                                      \"Good choice!  Oranges are full of Vitamin C!\"\n  Messagebox(w, msg)\nend\n\nbind(b, \"command\", callback)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The individual buttons can be accessed via the buttons property. This allows one to edit the labels, as in","category":"page"},{"location":"#","page":"Home","title":"Home","text":"set_items(rb.buttons[1], \"Honeycrisp Apples\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(The set_items method is used to set the items for a selection widget, in this case the lone item is the name, or label of the button.)","category":"page"},{"location":"#Menus-1","page":"Home","title":"Menus","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Menu bars for top level windows are easily created with the menu_add method. One can add actions items (pass a callback function), check buttons, radio buttons, or separators.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\ntcl(\"pack\", \"propagate\", w, false) ## or pack_stop_propagate(w)\n\nmb = Menu(w)\t\t\t## makes menu, adds to top-level window\nfmenu = menu_add(mb, \"File\")\nomenu = menu_add(mb, \"Options\")\n\nmenu_add(fmenu, \"Open file...\", (path) -> println(\"Open file dialog, ...\"))\nmenu_add(fmenu, Separator(w))\t## second argument is Tk_Separator instance\nmenu_add(fmenu, \"Close window\", (path) -> destroy(w))\n\ncb = Checkbutton(w, \"Something visible\")\nset_value(cb, true)\t\t## initialize\nmenu_add(omenu, cb)\t\t## second argument is Tk_Checkbutton instance\n\nmenu_add(omenu, Separator(w))\t## put in a separator\n\nrb = Radio(w, [\"option 1\", \"option 2\"])\nset_value(rb, \"option 1\")\t## initialize\nmenu_add(omenu, rb)\t\t## second argument is Tk_Radio instance\n\nb = Button(w, \"print selected options\")\npack(b, expand=true, fill=\"both\")\n\nfunction callback(path)\n  vals = map(get_value, (cb, rb))\n  println(vals)\nend\n\ncallback_add(b, callback)\t## generic way to add callback for most common event\n)","category":"page"},{"location":"#Entry-widget-1","page":"Home","title":"Entry widget","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Entry)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The entry widget can be used to collect data from the user.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\nf = Frame(w); pack(f, expand=true, fill=\"both\")\n\ne = Entry(f)\nb = Button(f, \"Ok\")\n\nformlayout(e, \"First name:\")\nformlayout(b, nothing)\nfocus(e)\t\t\t## put keyboard focus on widget\n\nfunction callback(path)\n  val = get_value(e)\n  msg = \"You have a nice name $val\"\n  Messagebox(w,  msg)\nend\n\nbind(b, \"command\", callback)\nbind(b, \"<Return>\", callback)\nbind(e, \"<Return>\", callback)  ## bind to a certain key press event","category":"page"},{"location":"#Listboxes-1","page":"Home","title":"Listboxes","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: List box)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There is no Listbox constructor; rather, we replicate this with Treeview simply by passing a vector of strings. Here we use a scrollbar too:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fruits = [\"Apple\", \"Navel orange\", \"Banana\", \"Pear\"]\nw = Toplevel(\"Favorite fruit?\")\ntcl(\"pack\", \"propagate\", w, false)\nf = Frame(w)\npack(f, expand=true, fill=\"both\")\n\nf1 = Frame(f)\t\t\t## need internal frame for use with scrollbars\nlb = Treeview(f1, fruits)\nscrollbars_add(f1, lb)\npack(f1,  expand=true, fill=\"both\")\n\nb = Button(f, \"Ok\")\npack(b)\n\nbind(b, \"command\") do path\t## do style\n         fruit_choice = get_value(lb)\n\t msg = (fruit_choice == nothing) ? \"What, no choice?\" : \"Good choice! $(fruit_choice[1])\" * \"s are delicious!\"\n\t Messagebox(w,  msg)\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The value returned by get_value is an array or nothing. Returning nothing may not be the best choice, perhaps a 0-length array is better?","category":"page"},{"location":"#","page":"Home","title":"Home","text":"One can configure the selectmode, e.g. configure(lb, selectmode = \"extended\") with either extended (multiple selection possible, browse (single selection), or none (no selection).) The shortcut lb[:selectmode] = \"extended\" will also work.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Treeview widget can also display a matrix of strings in a grid in addition to tree-like data.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"An editable grid could be done, but requires some additional Tk libraries.","category":"page"},{"location":"#Combo-boxes-1","page":"Home","title":"Combo boxes","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Selection from a list of choices can be done with a combo box:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Combo box)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fruits = [\"Apple\", \"Navel orange\", \"Banana\", \"Pear\"]\n\nw = Toplevel(\"Combo boxes\", 300, 200)\ntcl(\"pack\", \"propagate\", w, false)\nf = Frame(w); pack(f, expand=true, fill=\"both\")\n\ngrid(Label(f, \"Again, What is your favorite fruit?\"), 1, 1)\ncb = Combobox(f, fruits)\ngrid(cb, 2,1, sticky=\"ew\")\n\nb = Button(f, \"Ok\")\ngrid(b, 3, 1)\n\nfunction callback(path)\n  fruit_choice = get_value(cb)\n  msg = (fruit_choice == nothing) ? \"What, no choice?\" :\n                                    \"Good choice! $(fruit_choice)\" * \"s are delicious!\"\n  Messagebox(w, msg)\nend\n\nbind(b, \"command\", callback)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Here no choice also returns nothing. Use this value with set_value to clear the selection, if desired.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Editable combo boxes need to be configured by hand. (So combo isn't really what we have here :)","category":"page"},{"location":"#Text-windows-1","page":"Home","title":"Text windows","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The basic multi-line text widget can be done through:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\ntcl(\"pack\", \"propagate\", w, false)\nf = Frame(w)\ntxt = Text(f)\nscrollbars_add(f, txt)\npack(f, expand=true, fill = \"both\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Only a get_value and set_value is provided. One can configure other things (adding/inserting text, using tags, ...) directly with tcl or tcl_eval.","category":"page"},{"location":"#Events-1","page":"Home","title":"Events","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"One can bind a callback to an event in Tcl/Tk. There are few things to know:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Callbacks have at least one argument (we use path). With bind, other arguments are matched by name to correspond to Tcl/Tk's percent substitution. E.g. f(path, x, y) would get values for x and y through %x %y.\nWe show how to bind to a widget event, but this can be more general. E.g., top level events are for all children of the window a style can match all object of that style.\nmany widgets have a standard command argument in addition to window manager events they respond to. The value command can be passed to bind as the event.\nThe bind method does most of the work. The callback_add method binds to the most common event, mostly the command one. This can be used to bind the same callback to multiple widgets at once.","category":"page"},{"location":"#Sliders-1","page":"Home","title":"Sliders","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The Slider widget presents a slider for selection from a range of values. The convenience constructor allows one to specify the range of values through a Range object, or the low and high float values of the range.  Note that get_value returns a float, even if used with an integer range.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\nf = Frame(w)\npack(f, expand=true, fill=\"both\")\npack(Label(f, \"Int Range slider\"), side=\"top\")\ns_range = Slider(f, 1:100)\npack(s_range, side=\"top\", expand=true, fill=\"both\", anchor=\"w\")\nbind(s_range, \"command\", path -> println(\"The range value is $(int(get_value(s_range)))\"))\n\npack(Label(f, \"Float slider\"), side=\"top\")\ns_float = Slider(f, 0.0, 1.0)\npack(s_float, side=\"top\", expand=true, fill=\"both\", anchor=\"w\")\nbind(s_float, \"command\", path -> println(\"The float value is $(get_value(s_float))\"))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"One can also call bind using the do idiom:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"bind(sc, \"command\") do path\n  println(\"The value is $(get_value(sc))\")\nend","category":"page"},{"location":"#Sharing-a-variable-between-widgets-1","page":"Home","title":"Sharing a variable between widgets","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Scale label)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Some widgets have a textvariable option. These can be shared to have automatic synchronization. For example, the scale widget does not have any indication as to the value, we remedy this with a label.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"Slider and label\", 300, 200)\nf = Frame(w); pack(f, expand = true, fill = \"both\")\n\nsc = Slider(f, 1:20)\nl = Label(f)\nl[:textvariable] = sc[:variable]\n\ngrid(sc, 1, 1, sticky=\"ew\")\ngrid(l,  2, 1, sticky=\"nw\")\ngrid_columnconfigure(f, 1, weight=1)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This combination above is not ideal, as the length of the label is not fixed. It would be better to format the value and use set_value in a callback.","category":"page"},{"location":"#Spinbox-1","page":"Home","title":"Spinbox","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Scale spinbox)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The scale widget easily lets one pick a value, but it can be hard to select a precise one. The spinbox makes this easier. Here we link the two using a callback:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"Slider/Spinbox\")\nf = Frame(w); pack(f, expand = true, fill = \"both\")\n\nsc = Slider(f, 1:100)\nsp = Spinbox(f, 1:100)\nmap(pack, (sc, sp))\n\nbind(sc, \"command\", path -> set_value(sp, get_value(sc)))\nbind(sp, \"command\", path -> set_value(sc, get_value(sp)))","category":"page"},{"location":"#Images-1","page":"Home","title":"Images","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Image)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Image widget can be used to show gif files.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fname = Pkg.dir(\"Tk\", \"examples\", \"logo.gif\")\nimg = Image(fname)\n\nw = Toplevel(\"Image\")\nf = Frame(w); pack(f, expand = true, fill = \"both\")\nl = Label(f, img)\npack(l)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This example adds an image to a button.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fname = Pkg.dir(\"Tk\", \"examples\", \"weather-overcast.gif\") ## https://code.google.com/p/ultimate-gnome/\nimg = Image(fname)\n\nw = Toplevel(\"Icon in button\")\nf = Frame(w); pack(f, expand = true, fill = \"both\")\nb = Button(f, \"weather\", img)   ## or: b = Button(f, text=\"weather\", image=img, compound=\"left\")\npack(b)","category":"page"},{"location":"#Graphics-1","page":"Home","title":"Graphics","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The Canvas widget can be placed in a GUI to embed a graphics device. In the examples directory you can find an implementation of RStudio's manipulate function.  This functions makes it very straightforward to define basic interactive GUIs for plotting with Winston.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To try it, run","category":"page"},{"location":"#","page":"Home","title":"Home","text":"require(Pkg.dir(\"Tk\", \"examples\", \"manipulate.jl\"))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The above graphic was produced with:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ex = quote\n    x = linspace( 0, n * pi, 100 )\n    c = cos(x)\n    s = sin(x)\n    p = FramedPlot()\n    setattr(p, \"title\", title)\n    if\n        fillbetween add(p, FillBetween(x, c, x, s) )\n    end\n    add(p, Curve(x, c, \"color\", color) )\n    add(p, Curve(x, s, \"color\", \"blue\") )\n    file(p, \"example1.png\")\n    p\t\t\t\t## return a winston object\nend\nobj = manipulate(ex,\n                 slider(\"n\", \"[0, n*pi]\", 1:10)\n                 ,entry(\"title\", \"Title\", \"title\")\n                 ,checkbox(\"fillbetween\", \"Fill between?\", true)\n                 ,picker(\"color\", \"Cos color\", [\"red\", \"green\", \"yellow\"])\n                 ,button(\"update\")\n                 )","category":"page"},{"location":"#Frames-1","page":"Home","title":"Frames","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The basic widget to hold child widgets is the Frame. As seen in the previous examples, it is simply constructed with Frame. The padding option can be used to give some breathing room.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Laying out child components is done with a layout manager, one of pack, grid, or place in Tk.","category":"page"},{"location":"#pack-1","page":"Home","title":"pack","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For pack there are several configuration options that are used to indicate how packing of child components is to be done. The examples make use of","category":"page"},{"location":"#","page":"Home","title":"Home","text":"side: to indicate the side of the cavity that the child should be packed against. Typically \"top\" to top to bottom packing or \"left\" for left to right packing.\nanchor: One of the compass points indicating what part of the cavity the child should be attached to.\nexpand: should the child expand when packed\nfill: how should an expanding child fill its space. We use {:expand=>true, :fill=>\"both\"} to indicate the child should take all the available space it can. Use \"x\" to stretch horizontally, and \"y\" to stretch vertically.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Unlike other toolkits (Gtk, Qt), one can pack both horizontally and vertically within a frame. So to pack horizontally, one must add the side option each time. It can be convenient to do this using a map by first creating the widgets, then managing them:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"packing example\")\nf = Frame(w); pack(f, expand=true, fill=\"both\")\nok_b = Button(f, \"Ok\")\ncancel_b = Button(f, \"Cancel\")\nhelp_b = Button(f, \"Help\")\nmap(u -> pack(u, side = \"left\"), (ok_b, cancel_b, help_b))","category":"page"},{"location":"#grid-1","page":"Home","title":"grid","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For grid, the arguments are the row and column. We use integers or ranges. When given a range, the widget can span multiple rows or columns. Within a cell, the sticky argument replaces the expand, fill, and anchor arguments. This is a string with one or more directions to attach. A value of news is like Dict(:expand=>true, :fill=>\"both\"), as all four sides are attached to.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Grid)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"Grid\")\nf = Frame(w, padding = 10); pack(f, expand=true, fill=\"both\")\n\ns1 = Slider(f, 1:10)\ns2 = Slider(f, 1:10, orient=\"vertical\")\nb3 = Button(f, \"ew sticky\")\nb4 = Button(f, \"ns sticky\")\n\ngrid(s1, 1, 1:2, sticky=\"news\")\ngrid(s2, 2:3, 2, sticky=\"news\")\ngrid(b3, 2, 1)\ngrid(b4, 3, 1,   sticky=\"ns\") ## breaks theme","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We provide the formlayout method for conveniently laying out widgets in a form-like manner, with a label on the left. (Pass nothing to suppress this.)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"One thing to keep in mind: a container in Tk can only employ one layout style for its immediate children That is, you can't manage children both with pack and grid, though you can nest frames and mix and match layout managers.","category":"page"},{"location":"#Notebooks-1","page":"Home","title":"Notebooks","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A notebook container holds various pages and draws tabs to allow the user to switch between them. The page_add method makes this easy:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel()\ntcl(\"pack\", \"propagate\", w, false)\nnb = Notebook(w)\npack(nb, expand=true, fill=\"both\")\n\npage1 = Frame(nb)\npage_add(page1, \"Tab 1\")\npack(Button(page1, \"page 1\"))\n\npage2 = Frame(nb)\npage_add(page2, \"Tab 2\")\npack(Label(page2, \"Some label\"))\n\nset_value(nb, 2)\t\t## position on page 2","category":"page"},{"location":"#Panedwindows-1","page":"Home","title":"Panedwindows","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A paned window allows a user to allocate space between child components using their mouse. This is done by dragging a \"sash\". As with Notebook containers, children are added through page_add.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"w = Toplevel(\"Panedwindow\", 800, 300)\ntcl(\"pack\", \"propagate\", w, false)\nf = Frame(w); pack(f, expand=true, fill=\"both\")\n\npg = Panedwindow(f, \"horizontal\") ## orientation. Use \"vertical\" for up down.\ngrid(pg, 1, 1, sticky = \"news\")\n\npage_add(Button(pg, \"button\"))\npage_add(Label(pg, \"label\"))\n\nf = Frame(pg)\nformlayout(Entry(f), \"Name:\")\nformlayout(Entry(f), \"Rank:\")\nformlayout(Entry(f), \"Serial Number:\")\npage_add(f)\n\nset_value(pg, 100)                 ## set divider between first two pixels\ntcl(pg, \"sashpos\", 1, 200)\t   ## others set the tcl way","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"EditURL = \"../../../examples/manipulate.jl\"","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"This is an example mimicking RStudio's manipulate package (inspired by Mathematica's no doubt) The manipulate function makes it easy to create \"interactive\" GUIs. In this case, we can dynamically control parameters of a Winston graph. To add a control is easy. There are just a few: slider, picker, checkbox, button, and entry","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"using Winston\nusing Tk\nusing Compat; import Compat.String\n\n\nfunction render(c, p)\n    ctx = getgc(c)\n    Base.Graphics.set_source_rgb(ctx, 1, 1, 1)\n    Base.Graphics.paint(ctx)\n    Winston.page_compose(p, Tk.cairo_surface(c))\n    reveal(c)\n    Tk.update()\nend","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"do a manipulate type thing","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"context to store dynamic values","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"module ManipulateContext\nusing Winston\nend\n\n\nabstract type ManipulateWidget end\nget_label(widget::ManipulateWidget) = widget.label\n\nmutable struct SliderWidget <: ManipulateWidget\n    nm\n    label\n    initial\n    rng\nend\nfunction make_widget(parent, widget::SliderWidget)\n    sl = Slider(parent, widget.rng)\n    set_value(sl, widget.initial)\n    sl\nend\n\nslider(nm::AbstractString, label::AbstractString, rng::UnitRange, initial::Integer) = SliderWidget(nm, label, initial, rng)\nslider(nm::AbstractString, label::AbstractString, rng::UnitRange) = slider(nm, label, rng, minimum(rng))\nslider(nm::AbstractString,  rng::UnitRange) = slider(nm, nm, rng, minimum(rng))\n\nmutable struct PickerWidget <: ManipulateWidget\n    nm\n    label\n    initial\n    vals\nend\n\nfunction make_widget(parent, widget::PickerWidget)\n    cb = Combobox(parent)\n    set_items(cb, widget.vals)\n    set_value(cb, widget.initial)\n    set_editable(cb, false)\n    cb\nend\n\n\npicker(nm::AbstractString, label::AbstractString, vals::Vector{T}, initial) where {T <: AbstractString} = PickerWidget(nm, label, initial, vals)\npicker(nm::AbstractString, label::AbstractString, vals::Vector{T}) where {T <: AbstractString} = picker(nm, label, vals, vals[1])\npicker(nm::AbstractString, vals::Vector{T}) where {T <: AbstractString} = picker(nm, nm, vals)\npicker(nm::AbstractString, label::AbstractString, vals::Dict, initial) = PickerWidget(nm, label, vals, initial)\npicker(nm::AbstractString, label::AbstractString, vals::Dict) = PickerWidget(nm, label, vals, [string(k) for (k,v) in vals][1])\npicker(nm::AbstractString, vals::Dict) = picker(nm, nm, vals)\n\nmutable struct CheckboxWidget <: ManipulateWidget\n    nm\n    label\n    initial\nend\nfunction make_widget(parent, widget::CheckboxWidget)\n    w = Checkbutton(parent, widget.label)\n    set_value(w, widget.initial)\n    w\nend\nget_label(widget::CheckboxWidget) = nothing\n\ncheckbox(nm::AbstractString, label::AbstractString, initial::Bool) = CheckboxWidget(nm, label, initial)\ncheckbox(nm::AbstractString, label::AbstractString) = checkbox(nm, label, false)\n\n\nmutable struct ButtonWidget <: ManipulateWidget\n    label\n    nm\nend\nmake_widget(parent, widget::ButtonWidget) = Button(parent, widget.label)\nget_label(widget::ButtonWidget) = nothing\nbutton(label::AbstractString) = ButtonWidget(label, nothing)","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"Add text widget to gather one-line of text","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"mutable struct EntryWidget <: ManipulateWidget\n    nm\n    label\n    initial\nend\nmake_widget(parent, widget::EntryWidget) = Entry(parent, widget.initial)\nentry(nm::AbstractString, label::AbstractString, initial::AbstractString) = EntryWidget(nm, label, initial)\nentry(nm::AbstractString, initial::AbstractString) = EntryWidget(nm, nm, initial)\nentry(nm::AbstractString) = EntryWidget(nm, nm, \"{}\")","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"Expression returns a plot object. Use names as values","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"function manipulate(ex::(Union{Symbol,Expr}), controls...)\n    widgets = Array(Tk.Widget, 0)\n\n    w = Toplevel(\"Manipulate\", 800, 500)\n    pack_stop_propagate(w)\n    graph = Canvas(w, 500, 500); pack(graph, side=\"left\")\n    control_pane= Frame(w); pack(control_pane, side=\"left\", expand=true, fill=\"both\")\n\n\n    # create, layout widgets\n    for i in controls\n        widget = make_widget(control_pane, i)\n        push!(widgets, widget)\n        formlayout(widget, get_label(i))\n    end\n\n    get_values() = [get_value(i) for i in  widgets]\n    get_nms() = map(u -> u.nm, controls)\n    function get_vals()\n        d = Dict()                      # return Dict of values\n        vals = get_values(); keys = get_nms()\n        for i in 1:length(vals)\n            if !isa(keys[i], Nothing)\n                d[keys[i]] = vals[i]\n            end\n        end\n        d\n    end\n\n    function dict_to_module(d::Dict) ## stuff values into Manipulate Context\n        for (k,v) in d\n            eval(ManipulateContext, :($(Symbol(k)) = $v))\n        end\n    end\n\n    function make_graphic(x...)\n        d = get_vals()\n        dict_to_module(d)\n        p = eval(ManipulateContext, ex)\n        render(graph, p)\n    end\n    map(u -> callback_add(u, make_graphic), widgets)\n    widgets\nend","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"we need to make an expression. here we need to","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"use semicolon (perhaps)\nreturn p, the FramedPlot object to draw","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"ex = quote\n    x = linspace( 0, n * pi, 100 )\n    c = cos(x)\n    s = sin(x)\n    p = FramedPlot()\n    setattr(p, \"title\", title)\n    if fillbetween\n        add(p, FillBetween(x, c, x, s) )\n    end\n    add(p, Curve(x, c, \"color\", color) )\n    add(p, Curve(x, s, \"color\", \"blue\") )\n    file(p, \"example1.png\")\n    p\nend\n\nobj = manipulate(ex,\n                 slider(\"n\", \"[0, n*pi]\", 1:10)\n                 ,entry(\"title\", \"Title\", \"title\")\n                 ,checkbox(\"fillbetween\", \"Fill between?\", true)\n                 ,picker(\"color\", \"Cos color\", [\"red\", \"green\", \"yellow\"])\n                 ,button(\"update\")\n                 )","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"","category":"page"},{"location":"examples/manipulate/#","page":"Manipulate","title":"Manipulate","text":"This page was generated using Literate.jl.","category":"page"}]
}
